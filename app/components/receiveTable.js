"use client";

import { TbEdit } from "react-icons/tb";
import { BiSolidTrashAlt } from "react-icons/bi";
import { IoEyeSharp } from "react-icons/io5";
import { getReports, deleteReport } from "../lib/helper";
import { useQuery } from "@tanstack/react-query";
import { useState, useEffect } from "react";
import DataModal from "./showDataModal";

export default function ReceiveTable({ userData, onEdit }) {
    const storedDept =
      typeof window !== "undefined"
        ? sessionStorage.getItem("selectedDepartment")
        : null;
    const department = storedDept || userData?.department;
    const updatedUserData = { ...userData, department };

    const { isLoading, isError, data, error } = useQuery({
      queryKey: ["reports", updatedUserData],
      queryFn: () => getReports(updatedUserData),
    });

    // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modal
    const [isOpen, setIsOpen] = useState(false);
    const [selectedReport, setSelectedReport] = useState(null);

    // üîç state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö filter
    const [searchTerm, setSearchTerm] = useState("");
    const [statusFilter, setStatusFilter] = useState("");

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    const openModal = (report) => {
      setSelectedReport(report);
      setIsOpen(true);
      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô body scroll ‡∏Ç‡∏ì‡∏∞ modal ‡πÄ‡∏õ‡∏¥‡∏î
      if (typeof window !== "undefined") document.body.style.overflow = "hidden";
    };

    const closeModal = () => {
      setIsOpen(false);
      setSelectedReport(null);
      if (typeof window !== "undefined") document.body.style.overflow = "";
    };

    useEffect(() => {
      // ‡∏Å‡∏î Escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î modal
      const onKeyDown = (e) => {
        if (e.key === "Escape" && isOpen) closeModal();
      };
      window.addEventListener("keydown", onKeyDown);
      return () => window.removeEventListener("keydown", onKeyDown);
    }, [isOpen]);

    if (isLoading) return <div>Loading...</div>;
    if (isError) 
      return (
        <div className="text-center text-red-500 py-4">
            <span>Error: {error?.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"}</span>
        </div>
        );

    // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const filteredData = Array.isArray(data)
        ? data.filter(
            (item) =>
            (item.topic?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                item.description?.toLowerCase().includes(searchTerm.toLowerCase())) &&
            (statusFilter === "" || item.status === statusFilter)
        )
        : [];

    return (
      <>
        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
        <h2 className="text-2xl font-bold text-center mb-4 text-[#A83B24]">
          ‡πÅ‡∏ú‡∏ô‡∏Å: {department || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å"}
        </h2>

        {/* ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
          <div className="flex flex-col sm:flex-row gap-3 justify-between items-center mb-4">
              <input
              type="text"
              placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢..."
              className="border border-gray-300 rounded-lg p-2 w-full sm:w-1/3 focus:outline-none focus:ring-2 focus:ring-blue-400"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              />

              <select
              className="border border-gray-300 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              >
              <option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
              <option value="‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß">‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</option>
              <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
              <option value="‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</option>
              </select>
          </div>
        
        <div className="overflow-hidden rounded-xl shadow-lg border">
          <table className="min-w-full table-auto">
            <thead className="bg-gray-200">
              <tr>
                <th className="py-2 px-4 border-b">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</th>
                <th className="py-2 px-4 border-b">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</th>
                <th className="py-2 px-4 border-b">‡∏†‡∏≤‡∏û</th>
                <th className="py-2 px-4 border-b">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th className="py-2 px-4 border-b">‡πÅ‡∏ú‡∏ô‡∏Å</th>
                <th className="py-2 px-4 border-b">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</th>
                <th className="py-2 px-4 border-b">‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody className="bg-white">
              {filteredData.length === 0 ? (
                <tr>
                  <td colSpan={6} className="text-center p-4 border-b">
                    ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                  </td>
                </tr>
              ) : (
                filteredData.map((obj, i) => (
                  <Tr key={i} {...obj} onView={() => openModal(obj)} onEdit={onEdit} />
                ))
              )}
            </tbody>
          </table>
        </div>

        {/* Modal */}
        {isOpen && selectedReport && (
          <DataModal report={selectedReport} onClose={closeModal} />
        )}
      </>
    );
}

function Tr({
    report_id,
    topic,
    description,
    image,
    status,
    department,
    start_date,
    onView, // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    onEdit,
}) {

    const [showImage, setShowImage] = useState(false);

    const formattedDate = start_date
            ? new Date(start_date).toLocaleString("th-TH", {
                dateStyle: "medium",
                timeStyle: "short",
            })
            : "-";

    return (
      <tr className="text-center hover:bg-gray-50 odd:bg-white even:bg-gray-100 last:[&>td]:border-b-0">
        <td className="px-4 py-2 border-b max-w-[150px] overflow-hidden whitespace-nowrap text-ellipsis">
          <button className="inline-block text-blue-600 hover:underline truncate" onClick={onView}>
            {topic || "‡πÑ‡∏°‡πà‡∏°‡∏µ"}
          </button>
        </td>
        <td className="px-4 py-2 border-b max-w-[250px] overflow-hidden text-ellipsis whitespace-nowrap">
          <span className="block truncate">{description || "‡πÑ‡∏°‡πà‡∏°‡∏µ"}</span>
        </td>
        <td className="px-4 py-2 border-b">
          <div className="flex justify-center items-center gap-2">
            {image && image.data ? (
              <>
                  <button
                  title="‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå"
                  onClick={() => setShowImage(!showImage)}
                  className="hover:scale-110 transition-transform"
                  >
                  <IoEyeSharp size={22} />
                  </button>

                  {showImage && (
                  <div className="fixed inset-0 flex items-center justify-center bg-black/50 z-50">
                      <div className="bg-white rounded-xl shadow-lg p-4 max-w-3xl w-full">
                      <div className="flex justify-between items-center mb-3">
                          <h2 className="text-lg font-semibold text-gray-700">
                          {image.name || "‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"}
                          </h2>
                          <button
                          onClick={() => setShowImage(false)}
                          className="text-gray-500 hover:text-red-500 text-xl"
                          >
                          ‚úï
                          </button>
                      </div>

                      {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå */}
                      {image.name?.toLowerCase().endsWith(".pdf") ? (
                          // üßæ ‡πÅ‡∏™‡∏î‡∏á PDF
                          <iframe
                          src={image.data}
                          title={image.name}
                          className="w-full h-[80vh] border rounded-lg"
                          />
                      ) : (
                          // üñºÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                          <img
                          src={image.data}
                          alt={image.name || "report image"}
                          className="w-full h-auto max-h-[80vh] rounded-lg border object-contain"
                          />
                      )}
                      </div>
                  </div>
                  )}
              </>
              ) : (
              <span className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ</span>
              )}
          </div>
        </td>
        <td className="px-4 py-2 border-b">
          <span
            className={`${
              status == "‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß"
                ? "text-yellow-400"
                : status == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
                ? "text-orange-500"
                : status == "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
                ? "text-green-500"
                : "text-gray-500"
            }`}
          >
            {status || "‡πÑ‡∏°‡πà‡∏°‡∏µ"}
          </span>
        </td>
        <td className="px-4 py-2 border-b">
          <span>{department || "‡πÑ‡∏°‡πà‡∏°‡∏µ"}</span>
        </td>
        <td className="px-4 py-2 border-b max-w-[80px]">{formattedDate}</td> {/* ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô */}
        <td className="px-4 py-2 border-b">
          <div className="flex justify-center items-center">
            <button
              title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
              onClick={() => onEdit({ report_id, topic, description, image, status, department })}
            >
              <TbEdit color="green" size={20} />
            </button>
          </div>
          {/* <div className="flex justify-center items-center">
            <button
              title="‡∏•‡∏ö"
              onClick={() => {
                // ‡πÉ‡∏™‡πà logic ‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏ô‡∏£‡∏µ‡πÉ‡∏ä‡πâ (‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API) ‡πÅ‡∏•‡πâ‡∏ß refetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á placeholder:
                if (confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
                  // deleteReport(report_id) // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö
                  deleteReport(report_id)
                  console.log("‡∏•‡∏ö report:", report_id);
                }
              }}
            >
              <BiSolidTrashAlt title="‡∏•‡∏ö" onClick={() => deleteReport(report_id)} color="red" size={20}></BiSolidTrashAlt>
            </button>
          </div> */}    
        </td>
      </tr>
    );
}